buildscript {
    repositories { 
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.2.RELEASE"
    }
}

plugins {
    // Lombok generates getters and setters and more. https://projectlombok.org/setup/gradle
    // 5.3.3.3 is newest version compatible with Gradle 6 it seems.
    id "io.freefair.lombok" version "5.3.3.3"
    id "io.spring.dependency-management" version "1.0.11.RELEASE" 
    id "com.github.kt3k.coveralls" version "2.8.1" 
    id "org.owasp.dependencycheck" version "3.1.2"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

jar {
    archiveBaseName = 'template'
    archiveVersion =  System.getenv('version')
}

repositories {
    mavenLocal() 
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
 
configurations {
    all*.exclude module : 'spring-boot-starter-logging'
    // See testing & documentation at the end of this file
    asciidoctorExt
}

lombok {
    // check here for new versions: https://projectlombok.org/download
    version = '1.18.22'
}

if (project.hasProperty('travis')) {
    println 'Using travis profile for building ' + project.getName()
    apply from: 'gradle/profile-travis.gradle'
} else if (project.hasProperty('release') || project.hasProperty('clean-release')) {
    println 'Using release profile for building ' + project.getName()
    apply from: 'gradle/profile-release.gradle'   
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-rest")
 
    implementation("edu.kit.datamanager:service-base:0.1.2")
    //Enable dependency if messaging is needed, otherwise reduce size by skipping it
    //implementation("edu.kit.datamanager:generic-message-consumer:0.1")

    //Java 11 Support 
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.0.1'
    implementation('javax.activation:activation:1.1.1')
    implementation('org.javassist:javassist:3.23.1-GA')
    
    //Java 11 Support 
    testImplementation("org.mockito:mockito-core:2.18.0")
    testImplementation("org.powermock:powermock-module-junit4:2.0.0-beta.5")
    testImplementation("org.powermock:powermock-api-mockito2:2.0.0-beta.5")

    // Asciidoctor + spring-restdocs, see at the end of this file.
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc:2.0.5.RELEASE')
    asciidoctorExt('org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.4.RELEASE')
    asciidoctorExt('com.github.allati.asciidoctor.monotree:asciidoctor-extension-monotree:0.0.1')
}

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    launchScript()
}

/*
 * TESTING AND DOCUMENTATION
 * Configuration to run all tests and create the documentation below.
 * There are spring extensions for asciidoctor used to enrich the documentation.
 *
 * References:
 * - Asciidoctor: https://asciidoctor.github.io/asciidoctor-gradle-plugin/development-3.x/user-guide/#_as_external_library
 * - Spring RESTdocs https://spring.io/projects/spring-restdocs#learn -> Reference Doc -> Build Configuration
 */

ext {
    // Spring RESTdocs extension for Asciidoctor config
	snippetsDir = file('build/generated-snippets')
}

import java.text.SimpleDateFormat
asciidoctor {
    configurations 'asciidoctorExt'
    sourceDir "docs/"
    outputDir "build/docs"
    attributes "snippets": snippetsDir,
               "version": jar.archiveVersion,
               "date": new SimpleDateFormat("yyyy-MM-dd").format(new Date())
    // Spring RESTdocs extension for Asciidoctor config
    inputs.dir snippetsDir
	dependsOn test
}

test {
    // Spring RESTdocs extension for Asciidoctor config
    outputs.dir snippetsDir
    // Search for application.properties file in /config
    environment "spring.config.location", "classpath:/config/"

    testLogging {
        // always run tasks, they are never outdated
        outputs.upToDateWhen {false}
        // show stdio of tests
        showStandardStreams = true
    }
    // run really all tests
    include '**/*'
}

tasks.withType(Test) {
    testLogging {
        // always run tasks, they are never outdated
        outputs.upToDateWhen {false}
        // show stdio and stderr of tests
        showStandardStreams = true
        // The events to be logged.
        // events 'started', 'passed'
    }
}
